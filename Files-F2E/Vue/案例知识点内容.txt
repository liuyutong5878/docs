

vue项目
一 环境 
安装脚手架：npm install --global vue-cli
创建模板：vue init webpack myproject

未知：在案例中额外安装了?npm install --save-dev script-loader exports-loader

注意：vue支持的数据源sjon文件尽量使用单引号格式

v2.0  循环的写法：
<good-item 
	v-for="(item,index) in newGoodsData" :key="index" :item="item">
</good-item>


表单元素的描述文字应该使用label标签包裹，并且使用for属性指向表单元素，从而达到点击描述文字可以聚焦文本框的效果


一、自定义插件编写及插件的插入（详情解释在index.js里）

二、模拟登录跳转
	
	1、通过设置 ref  获取输入框这个元素 ：ref = "userInput"，从而获取这个元素的值

		let userName = this.$refs.userInput.value

		一般来讲，获取DOM元素，需document.querySelector（".input1"）获取这个dom节点，然后在获取input1的值。

		但是用ref绑定之后，我们就不需要在获取dom节点了，直接在上面的input上绑定input1，然后$refs里面调用就行。

		然后在javascript里面这样调用：this.$refs.input1  这样就可以减少获取dom节点的消耗了
	
	2、设置元信息，判断是进入登录页还是进入要进的页面

	3、钩子函数，在进入组件之前判断
		router.beforEach((to,from,next) => {


		})
		some() 只要有一个符合条件，就会返回一个true
		to.matched.some((item) => item.meta.login)
		另解释some：
			to.matched.some(function (item) {
				return item.meta.login 
			})

		router.app 指向根实例

	4、标记从哪个页面进来的：通过目标信息to ，获得目标路由，然后放到 query 里面，
	重定向
		query: {
          		redirect: to.path.slice(1)
        	}
		记录的路由显示为：http://localhost:1000/login?redirect=project

	然后获取到目标路由的值：let redirect = this.$route.query.redirect

	最后push到需要跳转页面
		this.$router.push({
          		path: redirect
        	})

三、面包屑导航设置：

	1、导航地址可以放在一个对象里面，每个地址对应一个中文：

		let flags = {
			project: '我的项目',
			workbench: '工作台',
			doc: '文档'
		}
	也可以放在每一条数据里面，还可以放在元信息里面；

	通过数据data 给默认值 ： flag:''

	一进来的时候要获取到值，所以我们需要设置一个钩子函数：

		beforeRouteEnter(to,from,next){
			// 进入完了之后找到flag

			next((vm) => {  // vm 是实例
				vm.flag = flags[to.path.slice(1)]
			})
		}

	layout是复用的，不会走这个钩子函数你，所以需要监控一下路由信息对象
		watch: {
			$route(){
				// 每次重新给它赋个值
				this.flag = flags[this.$route.path.slice(1)]
			}
		}

四、滚动动画

	1、利用hash，找到对应的元素，然后定位到页面的这个元素 ，
		
		// 添加hash值
		:to="{path:'#base'}"

	2、为了到达指定点的过程中显得不那么生硬，我们需要加载一个运动的库：tween.js 
		npm i tween.js --save
	
	然后在对应的页面引入进来： import TWEEN from 'tween.js'

	3、拿到hash值，然后找到页面上的元素，因为页面上的元素的ID就是hash值；
	
		原理： 
			点击的时候，右边有个运动的过程，我们只需要给它一个目标位置；
			点击的时候，路径更新了，当前组件是复用的，我们需要去获取hash值用$route去获取，我们可以监控route,利用钩子函数，当路径更新的时候。会触发钩子函数 beforeRouteUpdate()，得到最新的路由信息

				beforeRouteUpdate(to,from,next){
					// console.log(to.hash) to是目标路由发信息
					next()
				}

		拿到hash之后，就可以找到右侧对应的ID名字，从而找到元素，找到目标位置；				
		封装一个运动跳转目标位置的函数：animate()，这个函数接收到的是我们的目标对象to（目标路由信息）

			animate(to){


				//定义一个函数，用来不断更新执行（开个定时器）

				function animateFunc(time){
					requestAnimationFram(animateFunc)
					TWEEN.update(time)
				}

				// 下面解释浏览器工作原理

				// 判断是否存在hash值：

				if(t.hash ){
					animateFunc() //如果有元素就先调用一次定时器
						
					// 如果存在，就要走到指定的位置上去：
			
					// 获取目标元素：
					var el = document.getElementById(t.hash.slice(1)) // 这里获取的hash值带有井号，所以需要用slice截取一下		
					// 获取整个一个大块的元素：
					var doc = document.getElementByClassName('doc')[0]

					// 判断右侧的元素是否存在：

					if(el){
						// 如果存在，就要让它做运动：
						// TWEEN里面有个方法：Tween()，new TWEEN.Tween()；
						//这个方法接收一个对象{}，可以自己定义一个变量为起始位置：number:doc.scrollTop，结束位置就是通过hash值获取的元素 el 的位置；
						// 起始位置和结束位置中间有个过渡动画：.to(),to()也接收一个对象，里就是运动的属性number的目标位置：number:el.offsetTop,后面跟着一个持续时间500；
						//每一次number要赋给doc.scrollTop，所以我们需要监控一下，用.onUpdate()方法监控
							.onUpdate(function(){
								// 下面的这个this指的是Tween()，
								// 去掉小数为整数：toFixed(0)
								doc.scrollTop = this.number.toFixed(0)
								// toFixed(num) 方法可把 Number 四舍五入为指定小数位数的数字。num规定小数的位数，是 0 ~ 20 之间的值，包括 0 和 20，有些实现可以支持更大的数值范围。如果省略了该参数，将用 0 代替。
							})
						//最后就开始启动：有一个方法.start()

						
					}
				}
			}


		如果到达目标位置后，再拉动滚动条，当刷新之后，就指定到刚才的目标位置，但是这个过程很生硬，所以当刷新的时候，我们就需要添加一个滚动行为；我们就需要用到一个钩子函数：beforeRouteEnter(){ }，进入之后，需要在里面使用当前的实例，所以我们需要回调调用一下当前实例，它会把当前实例作为回调函数的参数传过来：
				
		beforeRouteEnter(to,from,next){ 
			next((vm) => {
				vm.animate(to)	
			})
		}

	4、requestAnimationFram()
		
		window.requestAnimationFrame()方法用于告诉浏览器，你想在浏览器的下个重绘（repaint）之前来执行一个动画或者执行浏览器通过调用一个特定的函数来更新动画的请求。该方法会在下次重回之前执行一个作为参数的回调函数。
		不论在什么时候，如果你已经准备好了更新你屏幕上的动画你都应该调用这个方法。这会在浏览器的下次重绘之前调用你的动画函数。执行回调函数的频率一般是60次/s，
		回调函数会被传第一个唯一的参数，一个DOMHighResTimeStamp参数,用于标记被requestAnimationFrame加入要队列准备执行的时间。因为在一帧中会执行很多回调，
		语法：requestID = window.requestAnimationFrame(callback);

		浏览器引擎的工作原理：

		简单讲，通常在文档初次加载时，浏览器引擎会解析HTML文档来构建DOM树，之后根据DOM元素的几何属性构建一棵用于渲染的树。渲染树的每个节点都有大小和边距等属性，类似于盒子模型（由于隐藏元素不需要显示，渲染树中并不包含DOM树中隐藏的元素）。当渲染树构建完成后，浏览器就可以将元素放置到正确的位置了，再根据渲染树节点的样式属性绘制出页面。由于浏览器的流布局，对渲染树的计算通常只需要遍历一次就可以完成。但table及其内部元素除外，它可能需要多次计算才能确定好其在渲染树中节点的属性，通常要花3倍于同等元素的时间。这也是为什么我们要避免使用table做布局的一个原因。

		・css的加载和解析不会阻塞html文档的解析
		・css的解析会阻塞js的执行，必须等到CSSOM生成后才能执行js
		・js的执行会阻塞html文档的解析
		・html一边解析一边显示
		・css必须完全解析完毕才能进入生成渲染树环节

		创建DOM树―创建CSSOM树―执行脚本―生成渲染树―生成布局―绘制

		重绘是一个元素外观的改变所触发的浏览器行为，例如改变visibility、outline、背景色等属性。浏览器会根据元素的新属性重新绘制，使元素呈现新的外观。重绘不会带来重新布局，并不一定伴随重排。
　　		重排是更明显的一种改变，可以理解为渲染树需要重新计算。下面是常见的触发重排的操作：

			a. DOM元素的几何属性变化
				当DOM元素的几何属性变化时，渲染树中的相关节点就会失效，浏览器会根据DOM元素的变化重新构建渲染树中失效的节点。之后，会根据新的渲染树重新绘制这部分页面。
				重排一定会引起浏览器的重绘，一个元素的重排通常会带来一系列的反应，甚至触发整个文档的重排和重绘，性能代价是高昂的。
			b. DOM树的结构变化
				当DOM树的结构变化时，例如节点的增减、移动等，也会触发重排。浏览器引擎布局的过程，类似于树的前序遍历，是一个从上到下从左到右的过程。通常在这个过程中，当前元素不会再影响其前面已经遍历过的元素。所以，如果在body最前面插入一个元素，会导致整个文档的重新渲染，而在其后插入一个元素，则不会影响到前面的元素。
			c. 获取某些属性
				浏览器引擎可能会针对重排做了优化。比如Opera，它会等到有足够数量的变化发生，或者等到一定的时间，或者等一个线程结束，再一起处理，这样就只发生一次重排。但除了渲染树的直接变化，当获取一些属性时，浏览器为取得正确的值也会触发重排。这样就使得浏览器的优化失效了。这些属性包括：offsetTop、offsetLeft、 offsetWidth、offsetHeight、scrollTop、scrollLeft、scrollWidth、scrollHeight、clientTop、clientLeft、clientWidth、clientHeight、getComputedStyle() (currentStyle in IE)。所以，在多次使用这些值时应进行缓存。

　　			此外，改变元素的一些样式，调整浏览器窗口大小等等也都将触发重排。
			・DOM操作（对元素的增删改、顺序变化等）
			・内容变化，包括表单区域内的文本变化
			・css属性的更改或者重新计算
			・增删样式表内容
			・修改class属性
			・浏览器窗口变化（滚动或缩放）
			・伪类样式激活（：hover等）	

　　		开发中，比较好的实践是尽量减少重排次数和缩小重排的影响范围:
			a. 将多次改变样式属性的操作合并成一次操作。例如，
　　				JS:
					var changeDiv = document.getElementById(‘changeDiv’);
					changeDiv.style.color = ‘#093′;
					changeDiv.style.background = ‘#eee’;
					changeDiv.style.height = ’200px’;
　　				可以合并为：
　　				CSS:
					div.changeDiv {
						background: #eee;
						color: #093;
						height: 200px;
					}
　　				JS:
					document.getElementById(‘changeDiv’).className = ‘changeDiv’;

　　			b. 将需要多次重排的元素，position属性设为absolute或fixed，这样此元素就脱离了文档流，它的变化不会影响到其他元素。例如有动画效果的元素就最好设置为绝对定位。
　　			c. 在内存中多次操作节点，完成后再添加到文档中去。例如要异步获取表格数据，渲染到页面。可以先取得数据后在内存中构建整个表格的html片段，再一次性添加到文档中去，而不是循环添加每一行。
　　			d. 由于display属性为none的元素不在渲染树中，对隐藏的元素操作不会引发其他元素的重排。如果要对一个元素进行复杂的操作时，可以先隐藏它，操作完成后再显示。这样只在隐藏和显示时触发2次重排。
　　			e. 在需要经常获取那些引起浏览器重排的属性值时，要缓存到变量。
			
			浏览器本身能够进行优化，尽可能减少重绘和回流。 
			一个position为absolute或fixed的元素更改，只会影响本身及子元素，而static元素则会影响后面所有元素。 
			JavaScript执行时，浏览器会缓存所有变化，然后一次性全部绘制。（读取元素属性会引起强制回流）。
			解析CSS的时候会按照如下顺序来定义优先级：浏览器默认设置，用户设置，外链样式，内联样式，html中的style。
			构建出DOM树，并且计算出样式数据后，下一步就是构建一个 渲染树（rendering tree）。
渲染树和DOM树有点像，但是是有区别的。DOM树完全和html标签一一对应，但是渲染树会忽略掉不需要渲染的元素，比如head、display:none的元素等。而且一大段文本中的每一个行在渲染树中都是独立的一个节点。渲染树中的每一个节点都存储有对应的css属性。

			我们可以进行的优化： 
				・样式表放在head标签中，脚本放在body结束前。 
				・简化并优化css选择器。（选择器是从右到左匹配） 
				・DOM节点保存在一个变量中，避免重复获取。 
				・修改元素样式时，更改其class属性更好。

　　		在最近几次面试中比较常问的一个问题：在前端如何实现一个表格的排序。如果应聘者的方案中考虑到了如何减少重绘和重排的影响，将是使人满意的方案。


五、优化：懒加载（按需加载）
	把不同的路由对应的组件分割成不同的代码块，然后路由被访问的时候才加载对应的组件，
	把每个导航对应的组件切成不同的js了，当访问导航的时候，把js按需加载进来
	应用的是JSONP的方式，而且每进入一个路由只会加载一次，不会重新加载。
	

	1、Vue异步组件
		{
			components: {
				custom: (resolve,reject) => { }	
			}
		}
		在组件里面，不一定要用key值来接收一个组件，而是可以接收一个回调函数，回调函数里面，请求成功了就调用resolve，然后就可以把它渲染到页面中去

	案列中引入进来的Layout，要放在下面路由的component里面，而component除了可以写成一个组件（component:Layout）之外，还可以写成一个回调函数（如上Vue里提供的异步组件： (resolve,reject) => { }）

		let Layout = (resolve) => {

			// 这里要返回一个webpack提供的代码分割的功能：require.ensure()

			return require.ensure([],() =>{

				//这里面，如果访问到导航对应的组件之后，就会return一个代码分割块，分割里面我们需要调用resoulve，resoulve哪个组件，就把哪个组件在里面加载

				resoulve(require('@/view/layout'))
			})
		}

	2、wobpack代码分割功能 

		a、require.ensure(依赖,回调函数,[chunk名字])

			require.ensure()接收3个参数:
			第一个是依赖（依赖哪些东西，是个数组），
			第二个是回调函数，回调函数执行之后，里面就可以加载我们想要执行的组件了，
			第三个参数是chunk名字

			有时候不需要切的很碎，需要按功能来切，那么两个导航对应的两个组件是访问切割出来的的同一个js文件；那么我们就需要用到第三个参数 chunk名字 来把两个组件合成一个js文件；
			let Project = (resolve) => {
				return require.ensure([],() =>{
					resoulve(require('@/view/backend/project'))
			},'abc') 
			let Doc = (resolve) => {
				return require.ensure([],() =>{
					resoulve(require('@/view/backend/doc'))
			},'abc') 
			这里的文件名字不是访问的js的文件名字，而是相当于标识，也就是打包成chunk之后，给它取个名字为‘abc’；当webpack打包的时候，看见两个组件的名字都是 abc ，那么就会自动的把两个组件打包成一个js文件
		}


		b、import()函数
			这个函数直接返回的就算promise的对象，所以直接使用import
			let Doc = (resolve) => {
				return import('@/view/backend/doc')
			}) 
			但是使用impot不能同时支持第二个参数，所以，如果想把两个组件打包到一个js里面的话，就使用require.ensure(）,而不能使用import，（但是import正在制定标准，可能以后会取代require.ensure(）），一个页面里面不能同时用impot懒加载两个或多个组件，




六、apache配置 （打包应用，好上传到服务器里面）

	src里面的都是属于开发环境的，需要打包成文件，放在服务器里上线，用户访问的时候渲染出来给用户看的

	1、那么我们要怎么打包这些文件呢？package.json里面提供了一个命令？：
		使用dev就是开发环境启动了，在里面开发和预览；build就是把文件打包成一个可上线的文件

		"script": {
			"dev": "webpack-dev-server --inline --progress --config build/webpack.dev.conf.js",
			"start": "npm run dev",
			"build": "node build/build.js"
		}
		所以在打包的时候，只要在命令行里面输入命令打包：npm run build 
		打包过程中，会进入生产环境里面，
		打包成功后，会生产一个文件夹 dist ，dist里面的文件就是src里的文件通过 npm run build 打包而来的文件，然后浏览器就会通过dist里面的index.html解析出来；这种文件不能通过双击打开，必须通过服务器的环境打开。

	一般，在apache里面，www文件夹是根路径，但是我们打包的时候，index.html所访问的的css和js是以dist为根路径的，不是www为根路径的，所以放在服务器里面访问的时候会报错。为了解决这个问题，我们在打包的时候可以进行设置：
		在开发环境里，confing文件夹下的index.js里的assetsRoot设置了打包后的路径，所以我们可以在此处修改：
			build: {
    				index: path.resolve(__dirname, '../dist/index.html'),

    				// Paths
    				assetsRoot: path.resolve(__dirname, '../dist'),
    				assetsSubDirectory: 'static',
    				assetsPublicPath: '/'
			}
		dist里面，生成的静态目录就是static；还有一个是公共的路径：assetsPublicPath，他是配置服务器上面的路径的，所以我们可以在此进行所需修改，比如：assetsPublicPath: '/dist/'，修改完配置之后，要重新打包一下

	2、apache有个特点，它在访问的时候是以路径去找资源的，当访问index.html的时候，它是访问根目录www下的index.html（http://localhost/）；如果访问的目录是http://localhost/document的时候，他就会认为是在根路径下有一个document文件夹，然后里面有个资源，但事实上是没有document文件夹的，所以在刷新的时候会出现 Not Found ；我们需要实现的是，在apache下访问不存在的路径的时候，都会指向index.html，只要访问到index.html，就可以找到对应的js文件，在js文件里面就有一个路由去统一管理这些路径；（index.html 必须放在www的根路径下，不然下面修改配置后会报错）

		那么我们要怎么去做？
		因为访问的是apache环境，所以要去apache的配置里面去配置：只要访问到这样的路径的话，那么就同一的访问到index.html里面；
		找到apache的配置：httpd.conf，然后找到里面的 LoadModule rewrite_module modules/mod_rewrite.so ，把它释放开，释放开之后就可以使用它了，
		然后再找到下面的 AllowOverride None ，把它修改为 AllowOverride all
			<Directory>
    				AllowOverride None
    				Options None
   			 	Require all granted
			</Directory>
		然后再查找下面的 AllowOverride ，也改成 AllowOverride all ，一共有两个地方，上下都改成 all；到这一步就完成了重写(rewrite)的功能（只要你访问到的文件不存在，为404，就会指向另一个文件），

		现在已经把模块释放开了，我们还需要一个配置 .htaccess ，这个配置文件需要放在根路径下面:/www/.htaccess，如果没有这个文件，就要手动去创建了，文件里面是下面这种形式：

			<IfModule mod_rewrite.c>
				RewriteEngine On
				RewriteBase /
				RewriteRule ^index\.html$ [L]
				RewriteCond %{REQUEST_FILENAME} !-f
				RewriteCond %{REQUEST_FILENAME} !-d
				RewriteRule . index.html [L]
			</IfModule>
		
		上面把 mod_rewrite 这个模块释放开了，那么这里有个判断，如果是这个模块（IfModule mod_rewrite.c），就会走<IfModule>里面的配置；其中有个配置（RewriteRule . /dist/index.html [L] ）就是我们重新写的规则；
		改好配置之后，记得重启服务器

		.htaccess这个文件里面的配置是在 Vue Router 官方文档里面有的，就是告知你，在apache环境里面怎么配置，在ingx环境里面怎么配置，在node的express环境里面怎么配置

